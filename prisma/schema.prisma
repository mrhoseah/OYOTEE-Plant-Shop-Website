datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id        Int     @id @default(autoincrement())
  name     String
  description   String?
  otherDetails  String?
  image   String? 
  quantity  Int @default(0)
  price  Float @default(0.00)
  published Boolean @default(false)
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  author   User @relation(fields: [authorId], references: [id])
  coupon  Coupon?
  couponId  Int?
  authorId Int
  likes Like[]
  ratings Rating[]
  reviews Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime?

}
model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique

}
model Coupon {
  id     Int     @id @default(autoincrement())
  name    String?
  code  String
  product Product @relation(fields: [productId],references: [id])
  productId Int
  discount Decimal
  discountStatus  Boolean @default(false)
  originalPrice Decimal
  newPrice  Decimal
  startDate    DateTime?
  expiryDate    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime?
}
model User {
  id    Int  @id @default(autoincrement())
  email String  @unique
  name  String
  password  String
  avatar  String?
  products Product[]
  profile Profile?
  likes Like[]
  ratings Rating[]
  reviews Review[]
  accessTokens AccessToken[]
  passwordTokens PasswordToken[]
}

model Category {
  id    Int     @id @default(autoincrement())
  name String  @unique
  description  String?
  products Product[]
}
model Like {
  product Product @relation(fields:[productId],references:[id])
  productId Int
  likedBy   User   @relation(fields: [likedById], references: [id])
  likedById Int
  @@id([likedById,productId])
}
model Rating {
  product Product @relation(fields:[productId],references:[id])
  productId Int
  ratedBy   User   @relation(fields: [ratedById], references: [id])
  ratedById Int
  @@id([ratedById,productId])
}
model Review {
  id Int @id @default(autoincrement())
  product Product @relation(fields:[productId],references:[id])
  productId Int
  reviewedBy   User   @relation(fields: [reviewedById], references: [id])
  reviewedById Int
}

model AccessToken {
  id    Int @id @default(autoincrement())
  token String
  user  User  @relation(fields: [userId], references: [id])
  userId  Int
}
model PasswordToken {
  id    Int @id @default(autoincrement())
  token String
  user  User  @relation(fields: [userId], references: [id])
  userId  Int
}