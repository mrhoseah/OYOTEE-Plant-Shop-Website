datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Product {
  id        Int     @id @default(autoincrement())
  name     String
  description   String?
  otherDetails  String?
  image String
  image_path String?
  quantity  Int @default(0)
  price  Float @default(0.00)
  published Boolean @default(false)
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  author   User @relation(fields: [authorId], references: [id])
  coupons  CouponOnProducts[]
  authorId Int
  likes Like[]
  rating Float @default(0)
  reviews Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime?

}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  avatar String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}
model Coupon {
  id     Int     @id @default(autoincrement())
  name    String?
  code  String
  products CouponOnProducts[]
  discount Decimal
  discountStatus  Boolean @default(false)
  startDate    DateTime?
  expiryDate    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime?
}
model CouponOnProducts{
  product Product @relation(fields: [productId], references: [id])
  productId Int
  coupon Coupon @relation(fields: [couponId], references: [id])
  couponId Int
  @@id([productId,couponId])
}
model User {
  id    Int  @id @default(autoincrement())
  email String  @unique
  name  String
  products Product[]
  profile Profile?
  likes Like[]
  reviews Review[]
  accessTokens AccessToken[]
  codes VerificationToken[]
  password  Password?
}

model Password {
  id Int @id @default(autoincrement())
  hash  String
  userId Int @unique
  user  User? @relation(fields: [userId],references: [id],onDelete: Cascade,onUpdate: Cascade)
}

model Category {
  id    Int     @id @default(autoincrement())
  name String  @unique
  description  String?
  products Product[]
}
model Like {
  product Product @relation(fields:[productId],references:[id])
  productId Int
  likedBy   User   @relation(fields: [likedById], references: [id])
  likedById Int @default(0)
  @@id([likedById,productId])
}
model Review {
  id Int @id @default(autoincrement())
  content String
  rateValue Float
  product Product @relation(fields:[productId],references:[id])
  productId Int
  reviewedBy   User   @relation(fields: [reviewedById], references: [id])
  reviewedById Int
  createdAt DateTime @default(now())
  @@unique([reviewedById,productId])
}

model AccessToken {
  id    Int @id @default(autoincrement())
  token String
  user  User  @relation(fields: [userId], references: [id])
  userId  Int
}
model VerificationToken {
  id    Int @id @default(autoincrement())
  token String
  user  User  @relation(fields: [userId], references: [id])
  userId  Int
}